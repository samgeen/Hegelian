'''
Created on 1 Oct 2013

@author: samgeen
'''

import ctypes
import asvis.Events

from pyglet.gl import *
import numpy as np

import scipy.special

import os

class Cubes(object):
    def __init__(self, cubeLocation):
        self._folder = cubeLocation
        self._cubes = []
        self._icurr = 0
        self._length = 0
        self._texture = ctypes.c_uint(0)
        self._first = True
    
    def Setup(self):
        # Set up the data cubes
        p = os.popen("ls "+self._folder+"/cube_*.npy")
        outs = p.read().split("\n")
        outs = filter(None, outs)
        for out in outs:
            print "Reading cube file "+out
            # Load cube file
            cube = np.load(out).astype("float32")
            # Find length of cube
            if self._length == 0:
                self._length = int(scipy.special.cbrt(len(cube)))
            # Put cube into array
            self._cubes.append(cube)
        print "Done reading cubes. Setting up ...",
        # Put the cube texture into memory
        self.UpdateTexture(self._cubes[self._icurr])
        print "Cube setup done"
        
    def Texture(self):
        return self._texture
        
    def UpdateTexture(self, cube):
        # Update the texture in graphics memory
        texsize = self._length
        print "Making texture...", 
        c_float_p = ctypes.POINTER(ctypes.c_float)
        data_p = cube.ctypes.data_as(c_float_p)
        glEnable(GL_TEXTURE_3D)
        if self._first:
            # Set up texture in graphics memory for the first time
            gl.glGenTextures(1,self._texture)
            glBindTexture( GL_TEXTURE_3D, self._texture )
            glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE)
            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER)
            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER)
            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_BORDER)
            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
            glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
            glTexImage3D(GL_TEXTURE_3D, 0, GL_RGBA32F_ARB, 
                texsize, texsize, texsize, 0,
                GL_RED, GL_FLOAT,data_p)
            self._first = False
        else:
            # Update the existing texture (subimages are faster than remaking the texture array each time)
            glBindTexture( GL_TEXTURE_3D, self._texture )
            glTexSubImage3D(GL_TEXTURE_3D, 0, 
                0,0,0, 
                texsize, texsize, texsize,
                GL_RED, GL_FLOAT,data_p)
        # Tidy up
        print "Done"
        glBindTexture( GL_TEXTURE_3D, 0 )
    
    def NextCube(self):
        self._icurr += 1
        if self._icurr >= len(self._cubes):
            self._icurr = len(self._cubes)-1
        self.UpdateTexture(self._cubes[self._icurr])
            
    def PrevCube(self):
        self._icurr -= 1
        if self._icurr < 0:
            self._icurr = 0
        self.UpdateTexture(self._cubes[self._icurr])
        

class MeshDrawable(object):
    '''
    A uniform cubic mesh drawable object
    '''
    def __init__(self, cubeLocation, window):
        '''
        Constructor
        cubeLocation - place where cubes are found
        density - a NxNxN cube of density
        '''
        self._cubes = Cubes(cubeLocation)
        self._window = window
        self._first = True
        self._redraw = True
        # Switch cubes?
        self._userInput = Events.UserInputHandler(self)
        self._window.push_handlers(self._userInput)
        
    def ToRedraw(self):
        return self._redraw
    
    def Redraw(self, redraw):
        self._redraw = redraw
        
    def _PlotSlice(self, slice):
        off = -0.707#-0.5
        ext = 1.414
        toff = -0.707
        text = 1.414
        glTexCoord3f(toff, toff, slice)
        glVertex3f(off,off,slice)
        glTexCoord3f(toff+text, toff, slice)
        glVertex3f(off+ext,off,slice)
        glTexCoord3f(toff+text, toff+text, slice)
        glVertex3f(off+ext,off+ext,slice)
        glTexCoord3f(toff, toff+text, slice)
        glVertex3f(off,off+ext,slice)

    def OnKeyboard(self, state):
        '''
        Register the pressing or releasing of a keyboard key
        This can be overridden by the concrete class if desired, or left inactive
        state - a dictionary of the mouse state:
                   {"button": button, "mod": modifier keys used, "pressed":True or False}
        '''
        # Escape
        pressed = state["pressed"]
        button = state["button"]
        
        # Z - previous cube
        if button == pyglet.window.key.Z and not pressed:
            self._cubes.PrevCube()
        # X - next cube
        if button == pyglet.window.key.X and not pressed:
            self._cubes.NextCube()
        # Redraw
        self.Redraw(True)
        Events.Redraw()
            
    def OnMouseMove(self, state):
        # Necessary for handler interface
        pass
        
    def OnMouseButton(self, state):
        # Necessary for handler interface
        pass
        
    # Draw the points to screen
    def Draw(self):
        '''
        Draw object
        '''
        
        # First time through?
        # NOTE: I have no idea how reliable this code is at determining whether we set these things
        if self._first:
            self._cubes.Setup()
            self._first = False
        
        glEnable(GL_BLEND)
        glBlendFunc(GL_ONE,GL_ONE)
        #glBlendEquation(GL_MAX)
        
        glEnable(GL_TEXTURE_3D)
        glBindTexture(GL_TEXTURE_3D, self._cubes.Texture())
        
        glColor4f(1.0,1.0,1.0,1.0)
        glMatrixMode(GL_MODELVIEW)
        glPushMatrix()
        glMatrixMode(GL_TEXTURE)
        glPushMatrix()
        #glTranslatef(-0.5,-0.5,-0.5)
        #glRotatef(90,0,0,1)
        glMatrixMode(GL_MODELVIEW)
        
        # Draw the mesh
        # Billboard the quads
        modelview = (GLfloat * 16)()
        textureview = (GLfloat * 16)()
        # Get the existing matrices
        glGetFloatv(GL_MODELVIEW_MATRIX, modelview)    
        glGetFloatv(GL_TEXTURE_MATRIX, textureview)
        glMatrixMode(GL_MODELVIEW)
        # Undo rotation (and scaling)
        model = np.ctypeslib.as_array(modelview).reshape(4,4)
        rotate = model[0:3,0:3]
        invrot = np.linalg.inv(rotate)
        for i in range(0,3):
            for j in range(0,3):
                textureview[i*4+j] = invrot[i,j]#modelview[i*4+j]
                if i == j:
                    modelview[i*4+j] = 1.0
                else:
                    modelview[i*4+j] = 0.0
        textureview[12] = textureview[13] = textureview[14] = 0.5
        # Set the new modelview matrix
        glLoadMatrixf(modelview)
        #glTranslatef(0.5,0.5,0.5)
        glMatrixMode(GL_TEXTURE)
        glLoadMatrixf(textureview)
        #glTranslatef(-0.5,-0.5,-0.5)
        #glTranslatef(0.5,0.5,0.5)
        #glTranslatef(-1,-1,-1)
        #glScalef(0.5,0.5,0.5)
        
        # Draw the quads
        glBegin(GL_QUADS)
        diff = 2.0*0.707 / 256.0
        for slice in np.arange(-0.707,0.707,diff):
            self._PlotSlice(slice)
        glEnd()
        glMatrixMode(GL_TEXTURE)
        glPopMatrix()
        glMatrixMode(GL_MODELVIEW)
        glPopMatrix()
        glBindTexture(GL_TEXTURE_3D, 0)
        glDisable(GL_TEXTURE_3D)
        
        # Draw bounding line
        glBegin(GL_LINE_STRIP)
        glVertex3f(0.5,0.5,0.0)
        glVertex3f(-0.5,0.5,0.0)
        glVertex3f(-0.5,-0.5,0.0)
        glVertex3f(0.5,-0.5,0.0)
        glVertex3f(0.5,0.5,0.0)
        glEnd()
        # Draw star
        glPointSize(3.0)
        glDisable(GL_BLEND)
        glColor4f(1.0,0.5,0.0,0.7)
        glBegin(GL_POINTS)
        glVertex3f(0.0,0.0,0.0)
        glEnd()
            
